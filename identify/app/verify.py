import telebot
from telebot import types
import pymysql

DB_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': '',
    'database': 'identify',
    'port': 3306
}

bot = telebot.TeleBot('')

def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        types.KeyboardButton('‚úÖ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç'),
        types.KeyboardButton('üìú –ü—Ä–∞–≤–∏–ª–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏'),
        types.KeyboardButton('üìå –ü–æ–¥–∞—Ç–∏ –∞–ø–µ–ª—è—Ü—ñ—é')
    )
    bot.send_message(chat_id, '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é:', reply_markup=markup)
    print(chat_id)

def check_user_in_db(phone_number, chat_id):
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            query = "SELECT phone_number, break_rull FROM app_customuser WHERE phone_number = %s;"
            cursor.execute(query, (phone_number,))
            result = cursor.fetchone()
            if result:
                _, break_rull = result
                if break_rull >= 3:
                    return False, True
                update_query = "UPDATE app_customuser SET is_active = %s, telegram_chat_id = %s WHERE phone_number = %s;"
                cursor.execute(update_query, (True, chat_id, phone_number))
                connection.commit()
                return True, False
            else:
                return False, False
    except pymysql.MySQLError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False, False
    finally:
        if connection:
            connection.close()

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, f'–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! üëã\n{message.chat.first_name} –í–∞—Å –≤—ñ—Ç–∞—î —Å–∏—Å—Ç–µ–º–∞ Identify')
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda msg: msg.text == 'üìú –ü—Ä–∞–≤–∏–ª–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏')
def rules(message):
    bot.send_message(message.chat.id, '–ù—É, —Ç—É—Ç –±—É–¥—É—Ç—å —è–∫—ñ—Å—å –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–ª–∏—Å—å :)')
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda msg: msg.text == '‚úÖ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç')
def activate_account(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    phone_button = types.KeyboardButton(text='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é', request_contact=True)
    markup.add(phone_button)
    bot.send_message(message.chat.id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–∫–∞—É–Ω—Ç—É:', reply_markup=markup)
    bot.register_next_step_handler(message, handle_phone_number)

def handle_phone_number(message):
    if message.contact:
        phone_number = message.contact.phone_number
        chat_id = message.chat.id

        # –û—á–∏—Å—Ç–∏–º –Ω–æ–º–µ—Ä –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        phone_number = phone_number.replace(" ", "")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ–±—ã –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–ª—Å—è —Å "+"
        if not phone_number.startswith("+"):
            phone_number = "+" + phone_number  # –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º +


        is_registered, has_break_rulls = check_user_in_db(phone_number, chat_id)
        
        if has_break_rulls:
            bot.send_message(chat_id, '–í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –Ω–∞–¥–º—ñ—Ä–Ω–µ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.')
        elif is_registered:
            bot.send_message(chat_id, '–î—è–∫—É—é, –í–∞—à –∞–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!')
        else:
            bot.send_message(chat_id, '–ñ–æ–¥–µ–Ω –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –Ω–∞ –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.')
    else:
        if hasattr(message, 'chat') and hasattr(message.chat, 'id'):
            chat_id = message.chat.id
            bot.send_message(chat_id, '–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é".')
        else:
            print("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ chat_id")
    show_main_menu(chat_id)

@bot.message_handler(func=lambda msg: msg.text == 'üìå –ü–æ–¥–∞—Ç–∏ –∞–ø–µ–ª—è—Ü—ñ—é')
def apeal(message):
    chat_id = message.chat.id
    violated_blogs = get_violated_blogs(chat_id)
    
    if violated_blogs:
        response = '–í–∏–±–µ—Ä—ñ—Ç—å –±–ª–æ–≥, –∑–∞ —è–∫–∏–º —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –∞–ø–µ–ª—è—Ü—ñ—é:\n'
        for i, blog in enumerate(violated_blogs, start=1):
            response += f"{i}. {blog[0]} - –ü—Ä–∏—á–∏–Ω–∞: {blog[1]}\n"
        bot.send_message(chat_id, response)
        bot.register_next_step_handler(message, handle_appeal_selection, violated_blogs)
    else:
        bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ–º–∞—î –ø–æ—Ä—É—à–µ–Ω—å, —è–∫—ñ –≤–∏–º–∞–≥–∞—é—Ç—å –∞–ø–µ–ª—è—Ü—ñ—ó.')
    
def handle_appeal_selection(message, violated_blogs):
    try:
        selected_index = int(message.text) - 1
        selected_blog = violated_blogs[selected_index]
        bot.send_message(message.chat.id, f"–û–ø–∏—à—ñ—Ç—å –∞–ø–µ–ª—è—Ü—ñ—é –¥–ª—è –±–ª–æ–≥—É '{selected_blog[0]}':")
        bot.register_next_step_handler(message, process_appeal, selected_blog[2])
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        apeal(message)

def get_violated_blogs(user_id):
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            query = """
            SELECT b.topic, br.reason, br.id
            FROM identify.app_break_rull_blogs br
            JOIN identify.app_blog b ON br.blog_id = b.id
            JOIN identify.app_customuser u ON b.author_id = u.id
            WHERE u.telegram_chat_id = %s AND br.is_appealed = FALSE;
            """
            cursor.execute(query, (user_id,))
            return cursor.fetchall()
    except pymysql.MySQLError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return []
    finally:
        if connection:
            connection.close()

def process_appeal(message, blog_id):
    if submit_appeal(blog_id, message.text):
        bot.send_message(message.chat.id, '‚úÖ –í–∞—à–∞ –∞–ø–µ–ª—è—Ü—ñ—è –ø—Ä–∏–π–Ω—è—Ç–∞ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.')
    else:
        bot.send_message(message.chat.id, '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á—ñ –∞–ø–µ–ª—è—Ü—ñ—ó.')
    show_main_menu(message.chat.id)

def submit_appeal(blog_id, appeal_text):
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            query = "UPDATE app_break_rull_blogs SET appeal = %s, is_appealed = TRUE WHERE id = %s;"
            cursor.execute(query, (appeal_text, blog_id))
            connection.commit()
            return True
    except pymysql.MySQLError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        if connection:
            connection.close()

def report_user(chat_id, message):
    bot.send_message(
        chat_id, 
        f"–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, –æ–¥–∏–Ω –∑ –í–∞—à–∏—Ö –±–ª–æ–≥—ñ–≤ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ, –ø—Ä–∏—á–∏–Ω–æ—é —Ç–æ–º—É —Å—Ç–∞–ª–æ: \"{message}\". "
        "–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏, –∞–ª–µ, –Ω–∞–¥–∞–ª—ñ, –Ω–µ –ø–æ—Ä—É—à—É–π—Ç–µ —ó—ó –ø—Ä–∞–≤–∏–ª. "
        "–î—è–∫—É—é –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è!"
    )
    show_main_menu(chat_id)

    # "–ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –∞–ø–µ–ª—è—Ü—ñ—é, –≤–æ–Ω–∞ –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ –Ω–∞–π–±–ª–∏–∂—á–∏–π —á–∞—Å. "

def disactive_account(chat_id):
    bot.send_message(
        chat_id,
        f"–í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –∑–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª —Å–∏—Å—Ç–µ–º–∏ Identify. "
        "–î–ª—è –π–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó —Å–ª—ñ–¥ –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏, —á–µ—Ä–µ–∑ —è–∫—ñ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –±–ª–æ–≥–∏."
    )

def verdict_negative(chat_id, blog):
    bot.send_message(
        chat_id,
        f"–ù–∞ –ø—Ä–µ–≤–µ–ª–∏–∫–∏–π –∂–∞–ª—å, –º–æ–¥–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥—Ö–∏–ª–∏–ª–∞ –í–∞—à—É –∞–ø—ñ–ª—è—Ü—ñ—é, —â–æ–¥–æ –±–ª–æ–≥—É - \"{blog.topic} | {blog.text}\", —ñ –π–æ–≥–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ. "
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–ª—ñ –¥–æ—Ç—Ä–∏–º—É—Ç–µ—Å—è –≤—Å—ñ—Ö –ø—Ä–∞–≤–∏–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏. –î—è–∫—É—é –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è."    
    )

def verdict_positive(chat_id, blog):
    bot.send_message(
        chat_id,
        f"–í—ñ—Ç–∞—î–º–æ, –í–∞—à–∞ –∞–ø–µ–ª—è—Ü—ñ—è —â–æ–¥–æ –±–ª–æ–≥—É - \"{blog.topic} | {blog.text}\", –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ—é. "
        "–¢–µ–ø–µ—Ä –±–ª–æ–≥ —Å—Ç–∞–≤ –ø—É–±–ª—ñ—á–Ω–∏–º, –∞–ª–µ, –Ω–∞–¥–∞–ª—ñ, –Ω–µ –∑–∞–±—É–≤–∞–π—Ç–µ –¥–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è –ø—Ä–∞–≤–∏–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏!"
    )

if __name__ == '__main__':
    bot.infinity_polling()
